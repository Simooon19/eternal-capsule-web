// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  
  // Subscription information
  stripeCustomerId    String?
  subscriptionId      String?
  subscriptionStatus  String?
  planId              String    @default("free")
  trialEndsAt         DateTime?
  subscriptionEndsAt  DateTime?
  
  // Profile information
  organization        String?
  phone              String?
  
  // Timestamps
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  accounts           Account[]
  sessions           Session[]
  contactSubmissions ContactSubmission[]
  memorials          Memorial[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Contact form submissions
model ContactSubmission {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  organization String?
  planId       String?
  message      String
  status       String   @default("new") // new, contacted, converted, closed
  userId       String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User?    @relation(fields: [userId], references: [id])
  
  @@index([email])
  @@index([createdAt])
}

// Memorial entities (simplified version for subscription limits)
model Memorial {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  userId      String
  sanityId    String?  // Reference to Sanity memorial
  status      String   @default("active") // active, archived, deleted
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}

// Subscription plan tracking
model SubscriptionEvent {
  id                 String   @id @default(cuid())
  userId             String
  stripeEventId      String   @unique
  eventType          String   // subscription.created, subscription.updated, etc.
  planId             String
  subscriptionId     String
  subscriptionStatus String
  metadata           Json?
  
  createdAt          DateTime @default(now())
  
  @@index([userId])
  @@index([stripeEventId])
}

// Trial tracking
model Trial {
  id        String   @id @default(cuid())
  userId    String   @unique
  planId    String
  startedAt DateTime @default(now())
  endsAt    DateTime
  status    String   @default("active") // active, expired, converted, cancelled
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([endsAt])
  @@index([status])
}

enum Role {
  USER
  ADMIN
  FUNERAL_HOME
}
